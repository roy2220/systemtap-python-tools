#!/usr/bin/env python
from __future__ import print_function
import argparse
import subprocess
import sys
from common import abspath, build_stap_args, gen_tapset_macros


def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument('-x', '--pid', help='PID to profile', required=True)
    argparser.add_argument('-t', '--time', default='30',
                           help='Time to run profiler, in seconds')
    argparser.add_argument('--py3', action='store_true',
                           help='Pass when profiling Python 3 programs')
    argparser.add_argument('-v', '--verbose', action='store_true')
    args, extra_args = argparser.parse_known_args()
    main_pid = str(args.pid)

    if args.py3:
        tapset_dir = abspath('../tapset/python3')
    else:
        tapset_dir = abspath('../tapset/python2')

    gen_tapset_macros(main_pid, tapset_dir)

    stap_cmd = ['stap', abspath('sample.stp'), args.time, '-I', tapset_dir]

    stap_cmd.extend(build_stap_args(main_pid))

    limits = ['-D', 'MAXSTRINGLEN=2048', '-D', 'MAXBACKTRACE=200',
              '-D', 'MAXMAPENTRIES=5000', '-D', 'MAXACTION=100000', '--skip-badvars']

    stap_cmd.extend(limits)
    stap_cmd.extend(extra_args)

    if args.verbose:
        print(" ".join(stap_cmd))
    p = subprocess.Popen(stap_cmd)
    p.wait()
    if p.returncode != 0:
        print("Error running stap script (exit code {}). "
              "You may need to pass --py3."
              "".format(p.returncode), file=sys.stderr)


if __name__ == '__main__':
    main()
