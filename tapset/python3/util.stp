global pystack;
global ustack;


function py3_extract_string(py_unicodeobject) {
    // The actual character buffer is stored right after the PyASCIIObject
    // struct. See Include/unicodeobject.h in the Python source for details.
    // TODO: assuming ASCII here
    data = &@cast(py_unicodeobject, "PyASCIIObject", @PYTHON_LIBRARY)[1];
    return user_string(data);
}


function func_name (frame) {
    return py3_extract_string(@cast(frame, "PyFrameObject", @PYTHON_LIBRARY)->f_code->co_name);
}

function filename (frame) {
    return py3_extract_string(@cast(frame, "PyFrameObject", @PYTHON_LIBRARY)->f_code->co_filename);
}


function unpack_pystack () {
    delete pystack;
    i = 0;
    frame = current_python_frame();
    while (frame != 0) {
        pystack[i] = sprintf("%s(%s)", func_name(frame), filename(frame));
        frame = @cast(frame, "PyFrameObject", @PYTHON_LIBRARY)->f_back;
        i++;
    }
}

function unpack_ustack () {
    delete ustack;
    i = 0;

/*
    // try throwing the kernel stack in there too
    if (!user_mode()) {
        kbt = backtrace();
        addr = tokenize(kbt, " ");
        while (addr != "") {
            ustack[i] = symname(strtol(addr, 16)) . "_[k]";
            i++;
            addr = tokenize("", " ");
        }
    }
*/

    bt = ubacktrace();
    addr = tokenize(bt, " ");
    while (addr != "") {
        ustack[i] = usymname(strtol(addr, 16));
        i++;
        addr = tokenize("", " ");
    }

}


function current_python_frame() {
    addr = &@var("_PyThreadState_Current@Python/pystate.c", @PYTHON_LIBRARY);
    v = @cast(addr, "_Py_atomic_address", @PYTHON_LIBRARY)->_value;
    if (v == 0) {
        // This only works if the GIL has been initialized :(
        addr = &@var("gil_last_holder@Python/ceval.c", @PYTHON_LIBRARY);
        v = @cast(addr, "_Py_atomic_address", @PYTHON_LIBRARY)->_value;
    }
    frame = @cast(v, "PyThreadState", @PYTHON_LIBRARY)->frame;
    return frame;
}


function sprint_merged_stack () {
    unpack_ustack();
    try {
        unpack_pystack();
        have_pystack = 1;
    } catch {
        have_pystack = 0;
    }
    merged_stack = "";
    pystack_idx = 0;
    foreach(idx+ in ustack) {
        if ((ustack[idx] == "PyEval_EvalFrameEx") && have_pystack) {
            merged_stack = ";" . pystack[pystack_idx] . merged_stack;
            pystack_idx++;
        } else {
            merged_stack = ";" . ustack[idx] . merged_stack;
        }
    }
    return merged_stack;
}

function sprint_pystack () {
    unpack_pystack();
    stack = "";
    foreach (idx+ in pystack) {
        stack = ";" . pystack[idx] . stack;
    }
    return stack;
}
